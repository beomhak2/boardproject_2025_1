<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board1">
	
	<!-- 유저 정보 -->
	<resultMap id="memberVO" type="com.project.page.board1.model.Member">
		<result property="userId" column="USER_ID"/>
		<result property="pwd" column="PWD"/>
		<result property="name" column="NAME"/>
		<result property="email" column="EMAIL"/>
		<result property="phone" column="PHONE"/>
		<result property="regDt" column="REG_DT"/>
		<result property="mdfDt" column="MDF_DT"/>
	</resultMap>
	
	<!-- 게시판 정보 -->
	<resultMap id="postResultMap" type="com.project.page.board1.model.Post">
		<result property="rnum" column="RNUM"/>
		<result property="postId" column="POST_ID"/>
		<result property="title" column="TITLE"/>
		<result property="postContent" column="POST_CONTENT"/>
		<result property="viewCnt" column="VIEW_CNT"/>
		<result property="delYn" column="DEL_YN"/>
		<result property="regDt" column="REG_DT"/>
		<result property="mdfDt" column="MDF_DT"/>
		<result property="boardId" column="BOARD_ID"/>
		<result property="userId" column="USER_ID"/>
		<collection property="member" resultMap="memberVO"/>
	</resultMap>
	
	<!-- 댓글 정보 -->
	<resultMap id="detailVO" type="com.project.page.board1.model.Reply">
		<result property="replyId" column="REPLY_ID"/>
		<result property="replyContent" column="REPLY_CONTENT"/>
		<result property="regDt" column="REG_DT"/>
		<result property="mdfDt" column="MDF_DT"/>
		<result property="replyClass" column="REPLY_CLASS"/>
		<result property="replyGroup" column="REPLY_GROUP"/>
		<result property="replyOrder" column="REPLY_ORDER"/>
		<result property="userId" column="USER_ID"/>
		<result property="postId" column="POST_ID"/>
		<result property="parentId" column="PARENT_ID"/>
	</resultMap>
	
	<!-- 검색 기능 -->
	<sql id="search">
		SELECT * FROM POST
		<where>
			board_id = 1
			<if test="keyword != null and keyword != ''">
				AND
				<choose>
					<when test="search == 1">
						(
							title LIKE '%' || #{keyword} || '%'
							OR USER_ID LIKE '%' || #{keyword} || '%'
						)
					</when>
					<when test="search == 2">
						title LIKE '%' || #{keyword} || '%'
					</when>
					<when test="search == 3">
						USER_ID LIKE '%' || #{keyword} || '%'
					</when>
				</choose>
			</if>
			AND DEL_YN = 'N'
		</where>
		order by REG_DT DESC
	</sql>

	<!-- 게시판 개수 -->
	<select id="selectPostCount" resultType="Integer">
		SELECT COUNT(*) FROM (<include refid="search"/>) T1
	</select>
	
	<!-- 게시판 목록 -->
	<select id="selectPostList" resultMap="postResultMap">
	    SELECT * FROM (
	    	SELECT T1.*, ROWNUM rnum FROM (
	    		<include refid="search"/>
    		) T1
    		WHERE ROWNUM &lt;= #{page} * #{perPage}
	    )
        WHERE rnum &gt;= ((#{page} - 1) * #{perPage}) +1
        ORDER BY rnum DESC
	</select>

	<!-- 게시판 입력 -->
	<insert id="insertPost" parameterType="com.project.page.board1.model.Post">
		<selectKey keyProperty="postId" resultType="int" order="BEFORE">
			SELECT seq_post_id.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO POST  (
			POST_ID, TITLE, POST_CONTENT, BOARD_ID, USER_ID
		) VALUES (
			#{postId}, #{title}, #{postContent}, 1, #{userId}
		)
	</insert>
	
	<!-- 게시판 postId 찾기 -->
	<select id="selectPostById" resultMap="postResultMap">
		SELECT p.*, m.USER_ID, m.EMAIL 
		FROM POST p
		LEFT JOIN MEMBER m on p.user_id = m.user_id 
		WHERE POST_ID = #{postId}
		AND BOARD_ID = 1
	</select>
	
	<!-- 게시판 조회수 -->
	<update id="increaseViewCount" parameterType="int">
		UPDATE POST 
		SET VIEW_CNT = COALESCE(VIEW_CNT, 0) + 1
		WHERE POST_ID = #{postId} and BOARD_ID = 1
	</update>
	
	<!-- 게시판 수정 -->
	<update id="updatePost" parameterType="com.project.page.board1.model.Post">
		UPDATE POST 
		SET TITLE = #{title}, POST_CONTENT = #{postContent}, MDF_DT = SYSDATE
		WHERE POST_ID = #{postId} and BOARD_ID = 1
	</update>

	<!-- 게시판 삭제 및 보관 -->
	<update id="deletePostY" parameterType="int" >
		UPDATE POST 
		SET DEL_YN = 'Y'
		WHERE POST_ID = #{postId} and BOARD_ID = 1
	</update>
	
	<!-- 댓글 달기 -->
	<insert id="replyInsert" parameterType="com.project.page.board1.model.Reply">
		<selectKey keyProperty="replyId" resultType="int" order="BEFORE">
			SELECT reply_seq.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO reply(
			REPLY_ID, REPLY_CONTENT, REPLY_GROUP, REPLY_ORDER, USER_ID, POST_ID, REPLY_CLASS, REG_DT
		)VALUES(
			#{replyId}, #{replyContent}, #{replyGroup, jdbcType=INTEGER}, #{replyOrder, jdbcType=INTEGER}, #{userId}, #{postId}, NVL(#{replyClass}, 0), SYSDATE
		)	
	</insert>
	
	<!-- 댓글 보기 -->
	<select id="replySelect" resultMap="detailVO" parameterType="int">
		SELECT
			reply_class, reply_id, reply_content, reg_dt, mdf_dt, reply_group, reply_order, user_id, post_id
		FROM reply
		WHERE post_id = #{postId}
		ORDER BY reply_group DESC, reply_order ASC
	</select>

	<select id="getNextReplyId" resultType="int">
		SELECT reply_seq.NEXTVAL FROM dual
	</select>
	
	<select id="selectReplyById" parameterType="int" resultMap="detailVO">
		SELECT * FROM reply WHERE reply_id = #{replyId}
	</select>
	
	<update id="updateReplyOrderAfter" parameterType="map">
		UPDATE reply
		SET reply_order = reply_order
		WHERE reply_group = #{replyGroup}
		AND reply_order > #{replyOrder}
	</update>


</mapper>
